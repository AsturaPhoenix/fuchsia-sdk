# Copyright 2017 Google Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

sdk_output_dir = "${root_out_dir}/sdk"

group("sdk") {
  deps = [
    # ":generate_dart_packages",
    # ":make_vars",
    ":sdk_includes",
    ":sdk_library",
    # ":shell_vars"
  ]
}

# TODO(rosswang): scan sdk_contents and dependencies for fidls and add sync
# variants for all
fidls = [
  "//application/services",
  "//application/services:service_provider",
  "//apps/network/services",
  "//apps/maxwell/services/context",
  "//apps/maxwell/services/resolver",
  "//apps/maxwell/services/suggestion",
]

sdk_contents = [
                 "//application/lib/app",
                 "//application/lib/svc",
                 "//apps/mozart/lib/skia",
                 "//apps/mozart/lib/view_framework",
                 "//apps/mozart/lib/view_framework:view_provider",
                 "//lib/fidl/cpp/bindings",
                 "//lib/fidl/cpp/bindings:serialization",
                 "//lib/mtl",
                 "//lib/mtl/waiter",
               ] + exec_script("scripts/fidl-sync.py", fidls, "list lines")

# A static library that links in all of the code required to build a fuchsia
# application outside of the fuchsia tree.
static_library("sdk_library") {
  complete_static_lib = true
  output_name = "fuchsia"
  output_dir = "${sdk_output_dir}/lib"
  deps = sdk_contents
}

action("sdk_includes") {
  output = "${sdk_output_dir}/include"
  script = "scripts/copy-includes.py"
  args = [
           root_out_dir,
           rebase_path("//"),
           rebase_path(output),
           "!//third_party/",
           "!//apps/fonts/",
           "!//apps/mozart/",
           "!//apps/tracing/",
         ] + sdk_contents
  outputs = [
    output,  # TODO(rosswang): enumerate output files
  ]
  deps = sdk_contents
}

action("make_vars") {
  script = "scripts/generate-vars.py"
  output = "${sdk_output_dir}/fuchsia.makevars"
  args = [
    root_out_dir,
    rebase_path("//"),
    "//sdk:sdk_library",
    rebase_path(output),
  ]
  outputs = [
    output,
  ]
}

action("shell_vars") {
  script = "scripts/generate-vars.py"
  output = "${sdk_output_dir}/fuchsia.env"
  args = [
    "--format=sh",
    root_out_dir,
    rebase_path("//"),
    "//sdk:sdk_library",
    rebase_path(output),
  ]
  outputs = [
    output,
  ]
}

action("generate_dart_packages") {
  deps = [
    "//application/lib/app/dart",
    "//application/services:services_dart",
    "//apps/modular/services/story:story_dart",
  ]
  script = "scripts/generate-dart-packages.py"
  args = [ root_out_dir ] + deps
  outputs = [
    "${sdk_output_dir}/dart-pkg/apps.modular.lib.app.dart/pubspec.yaml",
  ]
}
